What’s New in ASP.NET MVC 4?
	This book explores the ASP.NET MVC Framework in depth, showing how to make
the most of the  features and functionality it offers.	Since we’re now up to the fourth
version of the framework, however, much of what the  book covers is functionality that
existed prior to this latest version. If you are already familiar with previous versions of
the framework, you’re probably eager to  skip over what you already know and begin
learning all about the new additions.
The list below gives a brief description of each of the features new to version 4 of
ASP.NET MVC, along with references pointing you to the sections of the book that
show these features in action:
Asynchronous controllers
	Internet Information Server (IIS) processes each request it receives on a new thread,
so each new request ties up one of the finite number of threads available to IIS,
even if that thread is sitting idle (for example, waiting for a response from a database
query or web service). 	And, while recent updates in .NET Framework 4.0 and IIS
7 have drastically increased the default number of threads available to the IIS thread
pool, it’s still a good practice to avoid holding on to  system resources for longer
than you need to. Version 4 of the ASP.NET MVC Framework introduces asynchronous controllers to better handle these types of long-running requests in a more
asynchronous fashion. Through the use of asynchronous controllers, you can tell
the framework to free up the thread that is processing your request, letting itperform other processing tasks while it waits for the various tasks in the request to
finish. Once they finish,  the framework picks up where it left off, and returns the
same response as if the request had gone through a normal synchronous controller
—except now you can handle many more requests at once! If you’re interested in
learning more about asynchronous controllers, see Chapter 11, which explains
them in depth.
Display modes
	A growing number of devices are Internet-connected and ready to surf your site,
and you need to be ready for them?	Many times, the data displayed on these devices
is the same as the data  displayed on desktop devices, except the visual elements
need to take into consideration the smaller form factor  of mobile devices. ASP.NET
MVC display modes provide an easy, convention-based approach for tailoring views
and layouts to target different devices. Chapter 10 shows how to apply display
modes to your site as part of a holistic approach to adding mobile device support
to your sites.
Bundling and minification
	Even though it may seem like the only way to get on the Internet these days is
through some sort of high-speed connection, that doesn’t mean you can  treat the
client-side resources  that your site depends on in a haphazard manner? In fact,
when you consider how the overall download times are increasing, wasting even
fractions of  a second in download times  can really add up and begin to have a very
negative effect on the perceived performance of your site.	Concepts such as script
and stylesheet combining and minification may not be anything new, but with
the .NET Framework 4.5 release, they are now a fundamental part of the framework. What’s more, ASP.NET MVC embraces and extends the core .NET Framework functionality to make this tooling even more usable in your ASP.NET MVC
applications. Chapter 13 helps you tackle all of these concepts and also shows you
how to use the new tooling offered in the core ASP.NET and ASP.NET MVC
Frameworks.
Web API
	Simple HTTP data services are rapidly becoming the primary way to supply data
to the ever-increasing variety of applications, devices, and platforms. ASP.NET
MVC has always provided the ability to  return data in various formats, including
JSON and XML; however, the ASP.NET Web API takes this interaction a step
further, providing a more modern programming model that focuses on providing
full-fledged data services rather than controller actions that happen to return data.
In Chapter 6, you’ll see how to really take advantage of AJAX on the  client—and
you’ll use ASP.NET Web API services to do it!